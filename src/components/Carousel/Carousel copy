import Slide from 'components/Slide/Slide';
import React, { CSSProperties, FC, useState } from 'react';
import useSlide from '../../hooks/useSlide';
import styles from './Carousel.module.scss';

const caculatedWidth = (ammountItems: number) => {
  return 100 / ammountItems;
};

export interface CarouselProps extends PropsComponent {
  images: string[];
  settings?: CarouselSettings;
  responsive?: number[];

  render?: Function;
}

export interface CarouselSettings {
  items: number;
  margin: number;
  hasNav?: boolean;
  navClass?: string;
  hasDots?: boolean;
  dotClass?: string;
}

export interface SlideProperty {
  width: number;
  margin: number;
}

const defaultSettings: CarouselSettings = {
  items: 2,
  margin: 0,
  hasNav: true,
  navClass: 'nav-slide',
  hasDots: true,
  dotClass: 'dot',
};

const Carousel: FC<CarouselProps> = ({ images, settings = { ...defaultSettings }, render }) => {
  const { currentSlide, dragStart, dragging, dragEnd, nextSlide, prevSlide, pickSlide } = useSlide(images.length, 3);
  const [items, setItems] = useState(settings.items);
  const [slideProperty, setSlideProperty] = useState<SlideProperty>({ width: caculatedWidth(items), margin: settings.margin });


  const _renderNavSlide = () => {
    return (
      <div className={`${styles.navCarousel}`}>
        <button className={`${styles.slideBtn} ${styles.prev} `} onClick={prevSlide}>
          <i className="fas fa-angle-left"></i>
        </button>
        <button className={`${styles.slideBtn} ${styles.next} `} onClick={nextSlide}>
          <i className="fas fa-angle-right"></i>
        </button>
      </div>
    );
  };

  const _renderDot = (order: number) => {
    const activeClass = order === currentSlide ? styles.active : '';
    return <div className={`${styles.dot} ${activeClass}`} onClick={() => pickSlide(order)}></div>;
  };

  const _renderDots = () => {
    return <div className={styles.dots}>{images.map((img, index) => _renderDot(index))}</div>;
  };

  const position: CSSProperties = {
    transform: `translate3d(calc(${-currentSlide * slideProperty.width}% - ${currentSlide * 2 * slideProperty.margin}px), 0, 0)`,
  };
  return (
    <div className={`${styles.carousel} `} onMouseDown={dragStart} onMouseMove={dragging} onMouseUp={dragEnd}>
      <div className={`${styles.slideShow} `}>
        <div className={`${styles.slides} `} style={position}>
          <div className={styles.slideItem} style={{ width: `${slideProperty.width}%`, margin: slideProperty.margin }}>
            <Slide srcImg={images[0]} />
          </div>
          <div className={styles.slideItem} style={{ width: `${slideProperty.width}%`, margin: slideProperty.margin }}>
            <Slide srcImg={images[1]} />
          </div>
          <div className={styles.slideItem} style={{ width: `${slideProperty.width}%`, margin: slideProperty.margin }}>
            <Slide srcImg={images[2]} />
          </div>
          <div className={styles.slideItem} style={{ width: `${slideProperty.width}%`, margin: slideProperty.margin }}>
            <Slide srcImg={images[0]} />
          </div>
          <div className={styles.slideItem} style={{ width: `${slideProperty.width}%`, margin: slideProperty.margin }}>
            <Slide srcImg={images[1]} />
          </div>
          <div className={styles.slideItem} style={{ width: `${slideProperty.width}%`, margin: slideProperty.margin }}>
            <Slide srcImg={images[2]} />
          </div>
        </div>
      </div>
      {settings.hasNav && _renderNavSlide()}
      {settings.hasDots && _renderDots()}
    </div>
  );
};
export default Carousel;
